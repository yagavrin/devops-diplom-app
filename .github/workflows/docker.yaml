name: CI & CD (build on commit, deploy on tag)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  CR_REGISTRY: crpiop5kci1440r661pk
  CR_REPOSITORY: nginx
  DOCKERFILE: ./nginx/Dockerfile
  CONTEXT: nginx
  K8S_NAMESPACE: default
  K8S_DEPLOYMENT: nginx-app-deployment

jobs:
  build_push:
    name: Prepare image
    runs-on: ubuntu-latest
    environment: prod 
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to YCR
        uses: yc-actions/yc-cr-login@v3
        with:
          yc-sa-id: ${{ secrets.YC_SA_ID }}

      - name: Extract metadata (labels, tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cr.yandex/${{ env.CR_REGISTRY }}/${{ env.CR_REPOSITORY }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ env.SHORT_SHA }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    needs: build_push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          cat > ~/.ssh/ssh_key << EOF
          ${{ secrets.BASTION_SSH_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/ssh_key
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/ssh_key
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} > ~/.ssh/known_hosts
          ssh -i ~/.ssh/ssh_key ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} "
            IMG=\"cr.yandex/${{ env.CR_REGISTRY }}/${{ env.CR_REPOSITORY }}:${GITHUB_SHA:0:7}\"
            kubectl -n \"${{ env.K8S_NAMESPACE }}\" set image deployment/${{ env.K8S_DEPLOYMENT }} \
              nginx=\"\$IMG\"
            kubectl -n \"${{ env.K8S_NAMESPACE }}\" rollout status deployment/${{ env.K8S_DEPLOYMENT }}
          "
        shell: bash